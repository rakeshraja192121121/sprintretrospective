"use client";

import { useRouter } from "next/navigation";
import React, { useState, useEffect } from "react";

type Card = {
  id: string;
  title: string;
};

const EMPTY_CARD: Card = { id: "", title: "" };

function normalizeCards(cards: Card[]): Card[] {
  const trimmed = [...cards];
  // Remove all empty cards from the end
  while (
    trimmed.length > 0 &&
    trimmed[trimmed.length - 1].id === "" &&
    trimmed[trimmed.length - 1].title.trim() === ""
  ) {
    trimmed.pop();
  }
  // Add exactly one empty card at the end
  trimmed.push(EMPTY_CARD);
  return trimmed;
}

export default function PRDDashboard() {
  const router = useRouter();
  const [cards, setCards] = useState<Card[] | undefined>(undefined);
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState<string | null>(null);

  // Fetch cards from API on mount
  useEffect(() => {
    async function fetchCards() {
      setLoading(true);
      setError(null);
      try {
        const res = await fetch("/api/prd");
        if (!res.ok) throw new Error("Failed to fetch cards");
        const data: Card[] = await res.json();

        setCards(data.length > 0 ? normalizeCards(data) : [EMPTY_CARD]);
      } catch (err) {
        setError((err as Error).message);
        setCards([EMPTY_CARD]);
      }
      setLoading(false);
    }
    fetchCards();
  }, []);

  // Create a new card on server
  async function createCard(card: Card) {
    const res = await fetch("/api/prd", {
      method: "POST",
      headers: { "Content-Type": "application/json" },
      body: JSON.stringify({ title: card.title }), // Only send title; id generated by backend
    });

    if (!res.ok) {
      const { message } = await res.json();
      throw new Error(message || "Failed to create card");
    }

    const newCard = await res.json();
    return newCard;
  }

  // Patch (update) a card on the server
  async function updateCardOnServer(id: string, updates: Partial<Card>) {
    const res = await fetch(`/api/prd/${id}`, {
      method: "PATCH",
      headers: { "Content-Type": "application/json" },
      body: JSON.stringify(updates),
    });

    if (!res.ok) {
      const { message } = await res.json();
      throw new Error(message || "Failed to update card");
    }

    const updatedCard = await res.json();
    return updatedCard;
  }

  // Delete a card on the server
  async function deleteCardOnServer(id: string) {
    const res = await fetch(`/api/prd/${id}`, {
      method: "DELETE",
    });

    if (!res.ok) {
      const { message } = await res.json();
      throw new Error(message || "Failed to delete card");
    }

    return true;
  }

  async function updateCard(index: number, field: keyof Card, value: string) {
    if (!cards) return;

    const updatedCards = [...cards];
    updatedCards[index] = { ...updatedCards[index], [field]: value };

    setCards(normalizeCards(updatedCards));

    try {
      // If this is the last card and has some content, create it on server
      if (
        index === updatedCards.length - 1 &&
        updatedCards[index].title.trim() !== ""
      ) {
        const response = await createCard(updatedCards[index]);
        updatedCards[index] = response.card;
        updatedCards.push(EMPTY_CARD);
        setCards(updatedCards);
      } else {
        // For existing card updates, patch on server
        const card = updatedCards[index];
        if (card.id && field === "title") {
          await updateCardOnServer(card.id, { title: value });
        }
      }
    } catch (error) {
      console.error("Error updating card:", error);
      setError(`Failed to update card: ${(error as Error).message}`);
    }
  }

  async function deleteCard(index: number) {
    if (!cards) return;

    const cardToDelete = cards[index];

    if (cardToDelete.id.trim() !== "") {
      try {
        await deleteCardOnServer(cardToDelete.id);
      } catch (error) {
        console.error("Error deleting card:", error);
        setError(`Failed to delete card: ${(error as Error).message}`);
        return;
      }
    }

    const updatedCards = cards.filter((_, idx) => idx !== index);
    setCards(normalizeCards(updatedCards.length > 0 ? updatedCards : []));
  }

  const goToPRD = (id: string) => {
    if (id.trim() === "") return;
    router.push(`/PRD/${id}/versionHistory`);
  };

  if (loading) {
    return (
      <div>
        <span className="loading loading-dots loading-xs"></span>
        <span className="loading loading-dots loading-sm"></span>
        <span className="loading loading-dots loading-md"></span>
        <span className="loading loading-dots loading-lg"></span>
        <span className="loading loading-dots loading-xl"></span>
      </div>
    );
  }

  if (error) {
    return <div className="p-8 text-red-600 font-semibold">Error: {error}</div>;
  }

  if (!cards) {
    return null;
  }

  return (
    <div className="bg-white min-h-screen">
      <h1 className="p-2 text-xl text-center font-bold mb-6 bg-gray-800 text-white select-none">
        Project Workspace
      </h1>

      <div className="m-2">
        <div className="grid grid-cols-1 sm:grid-cols-2 md:grid-cols-3 gap-6">
          {cards.map((card, index) => (
            <div
              key={card.id || index} // use id as key if exists
              className="relative p-6 rounded-xl shadow-md bg-white text-gray-900"
            >
              {/* Delete button top-right */}
              <button
                onClick={() => deleteCard(index)}
                className="absolute top-2 right-2 text-red-600 hover:text-red-800 focus:outline-none"
                aria-label={`Delete card ${index + 1}`}
                title="Delete card"
                type="button"
              >
                &#x2715; {/* âœ• cross icon */}
              </button>

              {/* ID input removed */}

              <input
                type="text"
                value={card.title}
                onChange={(e) => updateCard(index, "title", e.target.value)}
                className="
                  w-full mb-6
                  bg-transparent
                  text-gray-900
                  font-semibold
                  text-xl
                  outline-none
                  border border-transparent
                  focus:border-blue-400
                  focus:ring-2
                  focus:ring-blue-300
                  rounded-md
                  transition
                "
                placeholder="Title"
              />

              <p
                onClick={() => goToPRD(card.id)}
                className={`text-blue-600 cursor-pointer select-none font-medium ${
                  card.id.trim() === ""
                    ? "opacity-50 pointer-events-none"
                    : "hover:underline"
                }`}
              >
                About project
              </p>
            </div>
          ))}
        </div>
      </div>
    </div>
  );
}
